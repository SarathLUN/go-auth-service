openapi: 3.0.3
info:
  title: Authentication Service API
  version: 1.0.0
  description: API for user registration and login.

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully.  Email sent for activation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          description: Bad Request - Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - User already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login:
    post:
      summary: Login with an existing account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful.  Returns a JWT.
          headers:
            Authorization:
              description: Bearer token for authentication.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad Request - Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid credentials or user not activated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /activate/{token}:
    get:
      summary: Activate user account
      tags:
        - Authentication
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: The activation token sent to the user's email.
      responses:
        '200':
          description: Account activated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          description: Bad Request - Invalid or expired token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description:  User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address.
        username:
          type: string
          description: User's username.
        password:
          type: string
          format: password
          description: User's password (should be securely hashed on the server).
          minLength: 8  # Enforce minimum password length

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address.
        password:
          type: string
          format: password
          description: User's password.

    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: Login successful
        token: # Include the token directly in the response body (Alternative to Header)
          type: string
          description: JWT token for authentication.

    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          example: Operation successful

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Description of the error.
          example: Invalid input data

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security: [] # No security by default, apply to specific endpoints if needed.

